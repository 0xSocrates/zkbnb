package multcache

import (
	"errors"
	"fmt"

	"github.com/zecrey-labs/zecrey-legend/pkg/zerror"
)

// error got from other package
var (
	errRedisCacheKeyNotExist = errors.New("redis: nil")
	errGoCacheKeyNotExist    = errors.New("Value not found in GoCache store")
)

// error generated by multcache
var (
	ErrNotExistInSql = zerror.New(40001, "data not exist in sql")
)

type Count struct {
	Count int64
}

// cache key register
const (
	KeyExample = "cache:dataName_dataIdentity"
)

// cache key prefix: account
func SpliceCacheKeyAccountByAccountName(accountName string) string {
	return "cache:account_accountName" + accountName
}

func SpliceCacheKeyAccountByAccountPk(accountPk string) string {
	return "cache:account_accountPk" + accountPk
}

// cache key prefix: tx
func SpliceCacheKeyTxsCount() string {
	return "cache:txsCount"
}

func SpliceCacheKeyTxByTxHash(txHash string) string {
	return "cache:tx_txHash" + txHash
}

func SpliceCacheKeyTxByTxId(txID int64) string {
	return fmt.Sprintf("cache:tx_txId_%d", txID)
}

func SpliceCacheKeyTxCountByTimeRange(data string) string {
	return "cache:txCount_" + data
}
