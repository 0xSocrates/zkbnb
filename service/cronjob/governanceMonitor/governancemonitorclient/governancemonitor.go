// Code generated by goctl. DO NOT EDIT!
// Source: governanceMonitor.proto

package governancemonitorclient

import (
	"context"
	"github.com/zecrey-labs/zecrey-legend/service/cronjob/governanceMonitor/governanceMonitor"
	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request  = governanceMonitor.Request
	Response = governanceMonitor.Response

	GovernanceMonitor interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	}

	defaultGovernanceMonitor struct {
		cli zrpc.Client
	}
)

func NewGovernanceMonitor(cli zrpc.Client) GovernanceMonitor {
	return &defaultGovernanceMonitor{
		cli: cli,
	}
}

func (m *defaultGovernanceMonitor) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := governanceMonitor.NewGovernanceMonitorClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
