/*
 * Copyright Â© 2021 Zecrey Protocol
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by goctl. DO NOT EDIT!
// Source: mempoolmonitor.proto

package server

import (
	"context"
	"github.com/zecrey-labs/zecrey-legend/service/cronjob/mempoolMonitor/internal/logic"
	"github.com/zecrey-labs/zecrey-legend/service/cronjob/mempoolMonitor/internal/svc"
	mempoolmonitor "github.com/zecrey-labs/zecrey-legend/service/cronjob/mempoolMonitor/mempoolMonitor"
)

type MempoolMonitorServer struct {
	svcCtx *svc.ServiceContext
	mempoolmonitor.UnimplementedMempoolMonitorServer
}

func NewMempoolMonitorServer(svcCtx *svc.ServiceContext) *MempoolMonitorServer {
	return &MempoolMonitorServer{
		svcCtx: svcCtx,
	}
}

func (s *MempoolMonitorServer) Ping(ctx context.Context, in *mempoolmonitor.Request) (*mempoolmonitor.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}
